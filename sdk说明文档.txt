SDK说明文档v1.0

1.主要类说明
AutoRecognize:应用于自动识别连接的执行器。
CommunicateUnit：通信单元，多线程udp通信收发数据。
Communication：通信管理类，管理多个通信单元，收发数据只需要用到这个类
CCSignal:信号类，用于信号触发后，调用关联的槽函数，类似于回调
DataUtil：数据转换类，用于协议id和执行器属性id直接相互转换
IData:二进制数据的组装和解析类
InnfosProxy：协议类，发送相关指令，在本类中组装成协议数据，交给通信管理类发送，通信管理类收到下位机传回的数据，也在本类中解析
Mediator：传递类，用于协议类和执行器属性管理类之间的数据交互
MotorData：单个执行器属性类，执行器所有数据属性都在本类中，用户实际查看的数据就存在本类中
MotorDataMgr：多个MotorData管理类，每个MotorData对应一个执行器，统一被管理
MotorsController：执行器控制类，用户直接使用的类，可以查询、修改和控制任意的执行器
ProxyParser：协议解析类，将下位机收到数据分成若干个完整的协议数据包，验证合法性，并交给协议类解析
UserDefine：命名空间，定义了一些执行器属性的属性值

2.基本流程

先调用initController初始化控制器，然后自动识别autoRecoginze，会发送m_sOperationFinished信号，操作类型是Recognize_Finished，然后可以启动执行器（launchAllMotors或者launchMotor，启动会需要一定时间，大概3.5s），启动完成后会发送m_sOperationFinished信号，操作类型是Launch_Finished，
这时就可以正常操作、查询、修改执行器的属性了，执行器属性并不会自动刷新，可以开启自动刷新功能，或者主动重新获取属性，属性刷新成功后会发送m_sMotorAttrChanged信号

3.sdk基本逻辑
查询修改属性时，会通过MotorDataMgr调用对应执行器，通知InnfosProxy发送协议，协议发送到Communication,Communication分发到对应的通信单元CommunicateUnit的发送队列中，发送单元是一个单独的线程，如果队列中有要发送的数据就会发送;
如果下位机有返回数据，就会通过与上面相反的流程，修改MotorData中的属性，触发m_sMotorAttrChanged信号和m_sRequestBack信号，部分可能需要频繁修改的数据不会有返回（设置电流、速度、位置），发送不保证一定成功，修改属性会先修改
MotorData中的m_userRequestData的值，返回成功以后才会把MotorData中的m_motorData中的值修改（无返回值的除外），用户查询到的值都是m_motorData中的值。